name: ci/cd

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
  push:
    branches: ["*"]
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login Azure
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID}}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","tenantId":"${{ secrets.AZURE_TENANT_ID}}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID}}"}'

      # - name: Get secrets from Key Vault
      #   run: |
      #     GITHUB_TOKEN_REPO_CTT=$(az keyvault secret show --name "${{ secrets.IDP_REPO_TOKEN_SECRET }}" --vault-name "${{ vars.AKV_NAME }}" --query value -o tsv)
      #     echo "GITHUB_TOKEN_REPO_CTT=$GITHUB_TOKEN_REPO_CTT" >> $GITHUB_ENV
      #     IDP_REPO_TOKEN

      # - name: Code validations
      #   run: echo 'Code validations'

      - name: Compile & run
        run: |
          chmod +x cli/*.sh
          ./cli/start.sh -d
        # env:
        #   VITE_HOST_PORT: ${{ vars.VITE_HOST_PORT }}
        #   VITE_ASSISTANT_PORT: ${{ vars.VITE_ASSISTANT_PORT }}
        #   VITE_ASSISTANT_URL: ${{ vars.VITE_ASSISTANT_URL }}

      # - name: Unit tests
      #   run: echo 'Unit tests'

      # - name: Integration tests
      #   run: echo 'Integration tests'

      # - name: Cross integration tests
      #   run: echo 'Cross integration tests'

      - name: Select MS
        run: |
          git fetch origin main:main
          SERVICES=$(git diff --name-only HEAD main | grep '^mfe' | cut -d'/' -f1 | sed 's/\.//g' | uniq | tr '\n' ' ')
          echo "SERVICES=$SERVICES" >> $GITHUB_ENV

      - name: Push images to ACR
        shell: bash
        run: |
          for service in $SERVICES; do
            IMAGE=$(docker images | grep -i "$service" | awk '{print $1}' | tr '[:upper:]' '[:lower:]')
            az acr login --name "${{ vars.ACR_NAME }}"
            REPO_NAME=$(echo "${{ vars.ACR_REPO_NAME }}" | tr '[:upper:]' '[:lower:]')
            IMAGE_NAME=$(basename "${IMAGE}" | tr '[:upper:]' '[:lower:]')
            docker tag "${IMAGE}" "${{ vars.ACR_NAME }}.azurecr.io/${REPO_NAME}/${IMAGE_NAME}:latest"
            docker push "${{ vars.ACR_NAME }}.azurecr.io/${REPO_NAME}/${IMAGE_NAME}:latest"
          done
        env:
          SERVICES: ${{ env.SERVICES }}

      # - name: Upload to Blob Storage
      #   run: |
      #     curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      #     az storage blob upload-batch \
      #       --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
      #       --account-key ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }} \
      #       --destination "my-container-name" \
      #       --source ./build

      # - name: Update CDN
      #   run: |
      #     az cdn endpoint purge \
      #       --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
      #       --profile-name ${{ secrets.AZURE_CDN_PROFILE }} \
      #       --name ${{ secrets.AZURE_CDN_ENDPOINT }} \
      #       --content-paths "/*"

      - name: Clone IDP Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.IDP_REPO_NAME }}
          token: ${{ secrets.IDP_REPO_TOKEN }}

      - name: Install kubeseal
        run: |
          set -eu
          curl -sL https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.18.0/kubeseal-0.18.0-linux-amd64.tar.gz \
            -o $GITHUB_WORKSPACE/kubeseal-0.18.0-linux-amd64.tar.gz
          tar xzvf $GITHUB_WORKSPACE/kubeseal-0.18.0-linux-amd64.tar.gz
          mkdir -p $GITHUB_WORKSPACE/bin
          mv $GITHUB_WORKSPACE/{,bin/}kubeseal
          chmod +x $GITHUB_WORKSPACE/bin/kubeseal
          echo $GITHUB_WORKSPACE/bin >> $GITHUB_PATH

      - name: Get cluster credentials and Encrypt Secrets
        shell: bash
        run: |
          az aks get-credentials --resource-group ${{ vars.AKS_RG_NAME_DEV }} --name ${{ vars.AKS_CLUSTER_NAME_DEV }}
          export AKS_CONTEXT=$(kubectl config current-context) 
          kubeseal --context "$AKS_CONTEXT" --controller-namespace flux-system --fetch-cert > ./mycert.pem

      # - name: Create PR to IDP
      #   run: echo 'Create PR to IDP'
