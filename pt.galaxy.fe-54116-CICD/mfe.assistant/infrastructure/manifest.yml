apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${SERVICE}-deployment
  namespace: galaxy-ms
  labels:
    app: ${SERVICE}
    version: 0.0.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${SERVICE}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: ${SERVICE}
        version: 0.0.0
    spec:
      serviceAccountName: ${SERVICE}-service-account
      containers:
      - name: ${SERVICE}
        image: ${SERVICE}:latest
        imagePullPolicy: Never
        ports:
        - containerPort: ${VITE_ASSISTANT_PORT}
        securityContext:
        livenessProbe:
          httpGet:
            path: /health
            port: ${VITE_ASSISTANT_PORT}
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /readiness
            port: ${VITE_ASSISTANT_PORT}
          initialDelaySeconds: 3
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "512Mi"
            cpu: "1"

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${SERVICE}-service-account
  namespace: galaxy-ms
  labels:
    account: ${SERVICE}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ${SERVICE}-cluster-role
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]

---

apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE}-service
  namespace: galaxy-ms
  labels:
    app: ${SERVICE}
spec:
  selector:
    app: ${SERVICE}
  ports:
    - protocol: TCP
      port: ${VITE_ASSISTANT_PORT}
      targetPort: ${VITE_ASSISTANT_PORT}
      nodePort: ${VITE_ASSISTANT_PORT}
  type: NodePort

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${SERVICE}-service-account
  namespace: galaxy-ms
  labels:
    account: ${SERVICE}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ${SERVICE}-cluster-role
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]

---

apiVersion: v1
kind: Secret
metadata:
  name: ${SERVICE}-secret
  type: Opaque
data:
  cert.pem: ${CERT_PEM}

